
// Since: cosmos-sdk 0.46
syntax = "proto3";
package atomone.gov.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "atomone/gov/v1/gov.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/atomone-hub/atomone/x/gov/types/v1";

// Query defines the gRPC querier service for gov module
service Query {
  // Constitution queries the chain's constitution.
  rpc Constitution(QueryConstitutionRequest) returns (QueryConstitutionResponse) {
    option (google.api.http).get = "/atomone/gov/v1/constitution";
  }

  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/atomone/gov/v1/proposals/{proposal_id}";
  }

  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/atomone/gov/v1/proposals";
  }

  // Vote queries voted information based on proposalID, voterAddr.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get =
        "/atomone/gov/v1/proposals/{proposal_id}/votes/{voter}";
  }

  // Votes queries votes of a given proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get =
        "/atomone/gov/v1/proposals/{proposal_id}/votes";
  }

  // Params queries all parameters of the gov module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/atomone/gov/v1/params/{params_type}";
  }

  // Deposit queries single deposit information based proposalID, depositAddr.
  rpc Deposit(QueryDepositRequest) returns (QueryDepositResponse) {
    option (google.api.http).get =
        "/atomone/gov/v1/proposals/{proposal_id}/deposits/{depositor}";
  }

  // Deposits queries all deposits of a single proposal.
  rpc Deposits(QueryDepositsRequest) returns (QueryDepositsResponse) {
    option (google.api.http).get =
        "/atomone/gov/v1/proposals/{proposal_id}/deposits";
  }

  // TallyResult queries the tally of a proposal vote.
  rpc TallyResult(QueryTallyResultRequest) returns (QueryTallyResultResponse) {
    option (google.api.http).get =
        "/atomone/gov/v1/proposals/{proposal_id}/tally";
  }

  // Governor queries governor information based on governor address.
  rpc Governor(QueryGovernorRequest) returns (QueryGovernorResponse) {
    option (google.api.http).get = "/atomone/gov/v1/governors/{governor_address}";
  }

  // Governors queries all governors.
  rpc Governors(QueryGovernorsRequest) returns (QueryGovernorsResponse) {
    option (google.api.http).get = "/atomone/gov/v1/governors";
  }

  // GovernanceDelegations queries all delegations of a governor.
  rpc GovernanceDelegations(QueryGovernanceDelegationsRequest) returns (QueryGovernanceDelegationsResponse) {
    option (google.api.http).get = "/atomone/gov/v1/governors/{governor_address}/delegations";
  }

  // GovernanceDelegation queries a delegation
  rpc GovernanceDelegation(QueryGovernanceDelegationRequest) returns (QueryGovernanceDelegationResponse) {
    option (google.api.http).get = "/atomone/gov/v1/delegations/{delegator_address}";
  }

  // GovernorValShares queries all governor virtual validator shares resulting from all governance delegations.
  rpc GovernorValShares(QueryGovernorValSharesRequest) returns (QueryGovernorValSharesResponse) {
    option (google.api.http).get = "/atomone/gov/v1/vshares/{governor_address}";
  }
}

// QueryConstitutionRequest is the request type for the Query/Constitution RPC method
message QueryConstitutionRequest {}

// QueryConstitutionResponse is the response type for the Query/Constitution RPC method
message QueryConstitutionResponse {
  string constitution = 1;
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  // proposal is the requested governance proposal.
  Proposal proposal = 1;
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  // proposal_status defines the status of the proposals.
  ProposalStatus proposal_status = 1;

  // voter defines the voter address for the proposals.
  string voter = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // depositor defines the deposit addresses from the proposals.
  string depositor = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  // proposals defines all the requested governance proposals.
  repeated Proposal proposals = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
message QueryVoteRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // voter defines the voter address for the proposals.
  string voter = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryVoteResponse is the response type for the Query/Vote RPC method.
message QueryVoteResponse {
  // vote defines the queried vote.
  Vote vote = 1;
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
message QueryVotesRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
message QueryVotesResponse {
  // votes defines the queried votes.
  repeated Vote votes = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {
  // params_type defines which parameters to query for, can be one of "voting",
  // "tallying" or "deposit".
  string params_type = 1;
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // Deprecated: Prefer to use `params` instead.
  // voting_params defines the parameters related to voting.
  VotingParams voting_params = 1 [ deprecated = true ];
  // Deprecated: Prefer to use `params` instead.
  // deposit_params defines the parameters related to deposit.
  DepositParams deposit_params = 2 [ deprecated = true ];
  // Deprecated: Prefer to use `params` instead.
  // tally_params defines the parameters related to tally.
  TallyParams tally_params = 3 [ deprecated = true ];
  // params defines all the paramaters of x/gov module.
  //
  // Since: cosmos-sdk 0.47
  Params params = 4;
}

// QueryDepositRequest is the request type for the Query/Deposit RPC method.
message QueryDepositRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // depositor defines the deposit addresses from the proposals.
  string depositor = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryDepositResponse is the response type for the Query/Deposit RPC method.
message QueryDepositResponse {
  // deposit defines the requested deposit.
  Deposit deposit = 1;
}

// QueryDepositsRequest is the request type for the Query/Deposits RPC method.
message QueryDepositsRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDepositsResponse is the response type for the Query/Deposits RPC method.
message QueryDepositsResponse {
  // deposits defines the requested deposits.
  repeated Deposit deposits = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTallyResultRequest is the request type for the Query/Tally RPC method.
message QueryTallyResultRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryTallyResultResponse is the response type for the Query/Tally RPC method.
message QueryTallyResultResponse {
  // tally defines the requested tally.
  TallyResult tally = 1;
}

// QueryGovernorRequest is the request type for the Query/Governor RPC method.
message QueryGovernorRequest {
  // gvernor_address defines the address of the governor.
  string governor_address = 1 [(cosmos_proto.scalar) = "atomone.GovernorAddressString"];
}

// QueryGovernorResponse is the response type for the Query/Governor RPC method.
message QueryGovernorResponse {
  // governor defines the requested governor.
  Governor governor = 1;
}

// QueryGovernorsRequest is the request type for the Query/Governors RPC method.
message QueryGovernorsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGovernorsResponse is the response type for the Query/Governors RPC method.
message QueryGovernorsResponse {
  // governors defines the requested governors.
  repeated Governor governors = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGovernanceDelegationsRequest is the request type for the Query/GovernanceDelegations RPC method.
message QueryGovernanceDelegationsRequest {
  // governor_address defines the address of the governor.
  string governor_address = 1 [(cosmos_proto.scalar) = "atomone.GovernorAddressString"];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryGovernanceDelegationsResponse is the response type for the Query/GovernanceDelegations RPC method.
message QueryGovernanceDelegationsResponse {
  // delegations defines the requested delegations.
  repeated GovernanceDelegation delegations = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGovernanceDelegationRequest is the request type for the Query/GovernanceDelegation RPC method.
message QueryGovernanceDelegationRequest {
  // delegator_address defines the address of the delegator.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryGovernanceDelegationResponse is the response type for the Query/GovernanceDelegation RPC method.
message QueryGovernanceDelegationResponse {
  // governor_address defines the address of the governor.
  string governor_address = 1;
}

// QueryGovernorValSharesRequest is the request type for the Query/GovernorValShares RPC method.
message QueryGovernorValSharesRequest {
  // governor_address defines the address of the governor.
  string governor_address = 1 [(cosmos_proto.scalar) = "atomone.GovernorAddressString"];

  // pagination defines the pagination in the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryGovernorValSharesResponse is the response type for the Query/GovernorValShares RPC method.
message QueryGovernorValSharesResponse {
  // val_shares defines the requested validator shares.
  repeated GovernorValShares val_shares = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
