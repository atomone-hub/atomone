// Code generated by MockGen. DO NOT EDIT.
// Source: x/dynamicfee/post/expected_keepers.go

// Package post_test is a generated GoMock package.
package post_test

import (
	reflect "reflect"

	types "github.com/atomone-hub/atomone/x/dynamicfee/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDynamicfeeKeeper is a mock of DynamicfeeKeeper interface.
type MockDynamicfeeKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicfeeKeeperMockRecorder
}

// MockDynamicfeeKeeperMockRecorder is the mock recorder for MockDynamicfeeKeeper.
type MockDynamicfeeKeeperMockRecorder struct {
	mock *MockDynamicfeeKeeper
}

// NewMockDynamicfeeKeeper creates a new mock instance.
func NewMockDynamicfeeKeeper(ctrl *gomock.Controller) *MockDynamicfeeKeeper {
	mock := &MockDynamicfeeKeeper{ctrl: ctrl}
	mock.recorder = &MockDynamicfeeKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicfeeKeeper) EXPECT() *MockDynamicfeeKeeperMockRecorder {
	return m.recorder
}

// GetEnabledHeight mocks base method.
func (m *MockDynamicfeeKeeper) GetEnabledHeight(ctx types0.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledHeight", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledHeight indicates an expected call of GetEnabledHeight.
func (mr *MockDynamicfeeKeeperMockRecorder) GetEnabledHeight(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledHeight", reflect.TypeOf((*MockDynamicfeeKeeper)(nil).GetEnabledHeight), ctx)
}

// GetParams mocks base method.
func (m *MockDynamicfeeKeeper) GetParams(ctx types0.Context) (types.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockDynamicfeeKeeperMockRecorder) GetParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockDynamicfeeKeeper)(nil).GetParams), ctx)
}

// GetState mocks base method.
func (m *MockDynamicfeeKeeper) GetState(ctx types0.Context) (types.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx)
	ret0, _ := ret[0].(types.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockDynamicfeeKeeperMockRecorder) GetState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockDynamicfeeKeeper)(nil).GetState), ctx)
}

// SetState mocks base method.
func (m *MockDynamicfeeKeeper) SetState(ctx types0.Context, state types.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockDynamicfeeKeeperMockRecorder) SetState(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockDynamicfeeKeeper)(nil).SetState), ctx, state)
}
