// Code generated by MockGen. DO NOT EDIT.
// Source: x/feemarket/ante/expected_keepers.go

// Package ante_test is a generated GoMock package.
package ante_test

import (
	reflect "reflect"

	types "github.com/atomone-hub/atomone/x/feemarket/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFeeMarketKeeper is a mock of FeeMarketKeeper interface.
type MockFeeMarketKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockFeeMarketKeeperMockRecorder
}

// MockFeeMarketKeeperMockRecorder is the mock recorder for MockFeeMarketKeeper.
type MockFeeMarketKeeperMockRecorder struct {
	mock *MockFeeMarketKeeper
}

// NewMockFeeMarketKeeper creates a new mock instance.
func NewMockFeeMarketKeeper(ctrl *gomock.Controller) *MockFeeMarketKeeper {
	mock := &MockFeeMarketKeeper{ctrl: ctrl}
	mock.recorder = &MockFeeMarketKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeMarketKeeper) EXPECT() *MockFeeMarketKeeperMockRecorder {
	return m.recorder
}

// GetMinGasPrice mocks base method.
func (m *MockFeeMarketKeeper) GetMinGasPrice(arg0 types0.Context, arg1 string) (types0.DecCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinGasPrice", arg0, arg1)
	ret0, _ := ret[0].(types0.DecCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinGasPrice indicates an expected call of GetMinGasPrice.
func (mr *MockFeeMarketKeeperMockRecorder) GetMinGasPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinGasPrice", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetMinGasPrice), arg0, arg1)
}

// GetParams mocks base method.
func (m *MockFeeMarketKeeper) GetParams(arg0 types0.Context) (types.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", arg0)
	ret0, _ := ret[0].(types.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockFeeMarketKeeperMockRecorder) GetParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetParams), arg0)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types0.Context, addr types0.AccAddress) types1.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types1.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockFeeGrantKeeper is a mock of FeeGrantKeeper interface.
type MockFeeGrantKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockFeeGrantKeeperMockRecorder
}

// MockFeeGrantKeeperMockRecorder is the mock recorder for MockFeeGrantKeeper.
type MockFeeGrantKeeperMockRecorder struct {
	mock *MockFeeGrantKeeper
}

// NewMockFeeGrantKeeper creates a new mock instance.
func NewMockFeeGrantKeeper(ctrl *gomock.Controller) *MockFeeGrantKeeper {
	mock := &MockFeeGrantKeeper{ctrl: ctrl}
	mock.recorder = &MockFeeGrantKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeGrantKeeper) EXPECT() *MockFeeGrantKeeperMockRecorder {
	return m.recorder
}

// UseGrantedFees mocks base method.
func (m *MockFeeGrantKeeper) UseGrantedFees(ctx types0.Context, granter, grantee types0.AccAddress, fee types0.Coins, msgs []types0.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseGrantedFees", ctx, granter, grantee, fee, msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseGrantedFees indicates an expected call of UseGrantedFees.
func (mr *MockFeeGrantKeeperMockRecorder) UseGrantedFees(ctx, granter, grantee, fee, msgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseGrantedFees", reflect.TypeOf((*MockFeeGrantKeeper)(nil).UseGrantedFees), ctx, granter, grantee, fee, msgs)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(ctx types0.Context, senderAddr types0.AccAddress, recipientModule string, amt types0.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromAccountToModule(ctx, senderAddr, recipientModule, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromAccountToModule), ctx, senderAddr, recipientModule, amt)
}
