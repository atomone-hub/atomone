// Code generated by MockGen. DO NOT EDIT.
// Source: x/coredaos/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"
	time "time"

	v1 "github.com/atomone-hub/atomone/x/gov/types/v1"
	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockGovKeeper is a mock of GovKeeper interface.
type MockGovKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockGovKeeperMockRecorder
}

// MockGovKeeperMockRecorder is the mock recorder for MockGovKeeper.
type MockGovKeeperMockRecorder struct {
	mock *MockGovKeeper
}

// NewMockGovKeeper creates a new mock instance.
func NewMockGovKeeper(ctrl *gomock.Controller) *MockGovKeeper {
	mock := &MockGovKeeper{ctrl: ctrl}
	mock.recorder = &MockGovKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGovKeeper) EXPECT() *MockGovKeeperMockRecorder {
	return m.recorder
}

// DecrementActiveProposalsNumber mocks base method.
func (m *MockGovKeeper) DecrementActiveProposalsNumber(ctx types.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementActiveProposalsNumber", ctx)
}

// DecrementActiveProposalsNumber indicates an expected call of DecrementActiveProposalsNumber.
func (mr *MockGovKeeperMockRecorder) DecrementActiveProposalsNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementActiveProposalsNumber", reflect.TypeOf((*MockGovKeeper)(nil).DecrementActiveProposalsNumber), ctx)
}

// GetProposal mocks base method.
func (m *MockGovKeeper) GetProposal(ctx types.Context, id uint64) (v1.Proposal, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposal", ctx, id)
	ret0, _ := ret[0].(v1.Proposal)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProposal indicates an expected call of GetProposal.
func (mr *MockGovKeeperMockRecorder) GetProposal(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposal", reflect.TypeOf((*MockGovKeeper)(nil).GetProposal), ctx, id)
}

// InsertActiveProposalQueue mocks base method.
func (m *MockGovKeeper) InsertActiveProposalQueue(ctx types.Context, proposalID uint64, endTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertActiveProposalQueue", ctx, proposalID, endTime)
}

// InsertActiveProposalQueue indicates an expected call of InsertActiveProposalQueue.
func (mr *MockGovKeeperMockRecorder) InsertActiveProposalQueue(ctx, proposalID, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertActiveProposalQueue", reflect.TypeOf((*MockGovKeeper)(nil).InsertActiveProposalQueue), ctx, proposalID, endTime)
}

// ProposalKinds mocks base method.
func (m *MockGovKeeper) ProposalKinds(proposal v1.Proposal) v1.ProposalKinds {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalKinds", proposal)
	ret0, _ := ret[0].(v1.ProposalKinds)
	return ret0
}

// ProposalKinds indicates an expected call of ProposalKinds.
func (mr *MockGovKeeperMockRecorder) ProposalKinds(proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalKinds", reflect.TypeOf((*MockGovKeeper)(nil).ProposalKinds), proposal)
}

// RefundAndDeleteDeposits mocks base method.
func (m *MockGovKeeper) RefundAndDeleteDeposits(ctx types.Context, proposalID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefundAndDeleteDeposits", ctx, proposalID)
}

// RefundAndDeleteDeposits indicates an expected call of RefundAndDeleteDeposits.
func (mr *MockGovKeeperMockRecorder) RefundAndDeleteDeposits(ctx, proposalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundAndDeleteDeposits", reflect.TypeOf((*MockGovKeeper)(nil).RefundAndDeleteDeposits), ctx, proposalID)
}

// RemoveFromActiveProposalQueue mocks base method.
func (m *MockGovKeeper) RemoveFromActiveProposalQueue(ctx types.Context, proposalID uint64, endTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFromActiveProposalQueue", ctx, proposalID, endTime)
}

// RemoveFromActiveProposalQueue indicates an expected call of RemoveFromActiveProposalQueue.
func (mr *MockGovKeeperMockRecorder) RemoveFromActiveProposalQueue(ctx, proposalID, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromActiveProposalQueue", reflect.TypeOf((*MockGovKeeper)(nil).RemoveFromActiveProposalQueue), ctx, proposalID, endTime)
}

// SetProposal mocks base method.
func (m *MockGovKeeper) SetProposal(ctx types.Context, proposal v1.Proposal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProposal", ctx, proposal)
}

// SetProposal indicates an expected call of SetProposal.
func (mr *MockGovKeeperMockRecorder) SetProposal(ctx, proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProposal", reflect.TypeOf((*MockGovKeeper)(nil).SetProposal), ctx, proposal)
}

// UpdateMinDeposit mocks base method.
func (m *MockGovKeeper) UpdateMinDeposit(ctx types.Context, checkElapsedTime bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMinDeposit", ctx, checkElapsedTime)
}

// UpdateMinDeposit indicates an expected call of UpdateMinDeposit.
func (mr *MockGovKeeperMockRecorder) UpdateMinDeposit(ctx, checkElapsedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMinDeposit", reflect.TypeOf((*MockGovKeeper)(nil).UpdateMinDeposit), ctx, checkElapsedTime)
}

// UpdateMinInitialDeposit mocks base method.
func (m *MockGovKeeper) UpdateMinInitialDeposit(ctx types.Context, checkElapsedTime bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMinInitialDeposit", ctx, checkElapsedTime)
}

// UpdateMinInitialDeposit indicates an expected call of UpdateMinInitialDeposit.
func (mr *MockGovKeeperMockRecorder) UpdateMinInitialDeposit(ctx, checkElapsedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMinInitialDeposit", reflect.TypeOf((*MockGovKeeper)(nil).UpdateMinInitialDeposit), ctx, checkElapsedTime)
}
