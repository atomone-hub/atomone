// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomone/coredaos/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAnnotateProposal defines a message for annotating a proposal.
type MsgAnnotateProposal struct {
	// annotator is the address of the dao annotating the proposal.
	Annotator string `protobuf:"bytes,1,opt,name=annotator,proto3" json:"annotator,omitempty"`
	// proposal_id is the ID of the proposal to annotate.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// annotation is the annotation to add to the proposal.
	Annotation string `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
	// overwrite is a boolean indicating whether to overwrite the existing annotation.
	// Must be set to true if the proposal already has an annotation.
	// Ignored if the proposal does not have yet an annotation.
	Overwrite bool `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (m *MsgAnnotateProposal) Reset()         { *m = MsgAnnotateProposal{} }
func (m *MsgAnnotateProposal) String() string { return proto.CompactTextString(m) }
func (*MsgAnnotateProposal) ProtoMessage()    {}
func (*MsgAnnotateProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{0}
}
func (m *MsgAnnotateProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnnotateProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnnotateProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnnotateProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnnotateProposal.Merge(m, src)
}
func (m *MsgAnnotateProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnnotateProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnnotateProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnnotateProposal proto.InternalMessageInfo

func (m *MsgAnnotateProposal) GetAnnotator() string {
	if m != nil {
		return m.Annotator
	}
	return ""
}

func (m *MsgAnnotateProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *MsgAnnotateProposal) GetAnnotation() string {
	if m != nil {
		return m.Annotation
	}
	return ""
}

func (m *MsgAnnotateProposal) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

// MsgAnnotateProposalResponse defines the response for MsgAnnotateProposal.
type MsgAnnotateProposalResponse struct {
}

func (m *MsgAnnotateProposalResponse) Reset()         { *m = MsgAnnotateProposalResponse{} }
func (m *MsgAnnotateProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAnnotateProposalResponse) ProtoMessage()    {}
func (*MsgAnnotateProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{1}
}
func (m *MsgAnnotateProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnnotateProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnnotateProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnnotateProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnnotateProposalResponse.Merge(m, src)
}
func (m *MsgAnnotateProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnnotateProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnnotateProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnnotateProposalResponse proto.InternalMessageInfo

// MsgEndorseProposal defines a message for endorsing a proposal.
type MsgEndorseProposal struct {
	// endorser is the address of the dao endorsing the proposal.
	Endorser string `protobuf:"bytes,1,opt,name=endorser,proto3" json:"endorser,omitempty"`
	// proposal_id is the ID of the proposal to endorse.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *MsgEndorseProposal) Reset()         { *m = MsgEndorseProposal{} }
func (m *MsgEndorseProposal) String() string { return proto.CompactTextString(m) }
func (*MsgEndorseProposal) ProtoMessage()    {}
func (*MsgEndorseProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{2}
}
func (m *MsgEndorseProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEndorseProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEndorseProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEndorseProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEndorseProposal.Merge(m, src)
}
func (m *MsgEndorseProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgEndorseProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEndorseProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEndorseProposal proto.InternalMessageInfo

func (m *MsgEndorseProposal) GetEndorser() string {
	if m != nil {
		return m.Endorser
	}
	return ""
}

func (m *MsgEndorseProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// MsgEndorseProposalResponse defines the response for MsgEndorseProposal.
type MsgEndorseProposalResponse struct {
}

func (m *MsgEndorseProposalResponse) Reset()         { *m = MsgEndorseProposalResponse{} }
func (m *MsgEndorseProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEndorseProposalResponse) ProtoMessage()    {}
func (*MsgEndorseProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{3}
}
func (m *MsgEndorseProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEndorseProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEndorseProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEndorseProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEndorseProposalResponse.Merge(m, src)
}
func (m *MsgEndorseProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEndorseProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEndorseProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEndorseProposalResponse proto.InternalMessageInfo

// MsgExtendVotingPeriod defines a message for extending the voting period of a proposal.
type MsgExtendVotingPeriod struct {
	// extender is the address of the dao extending the voting period.
	Extender string `protobuf:"bytes,1,opt,name=extender,proto3" json:"extender,omitempty"`
	// proposal_id is the ID of the proposal to extend.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *MsgExtendVotingPeriod) Reset()         { *m = MsgExtendVotingPeriod{} }
func (m *MsgExtendVotingPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgExtendVotingPeriod) ProtoMessage()    {}
func (*MsgExtendVotingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{4}
}
func (m *MsgExtendVotingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtendVotingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtendVotingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtendVotingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtendVotingPeriod.Merge(m, src)
}
func (m *MsgExtendVotingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtendVotingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtendVotingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtendVotingPeriod proto.InternalMessageInfo

func (m *MsgExtendVotingPeriod) GetExtender() string {
	if m != nil {
		return m.Extender
	}
	return ""
}

func (m *MsgExtendVotingPeriod) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// MsgExtendVotingPeriodResponse defines the response for MsgExtendVotingPeriod.
type MsgExtendVotingPeriodResponse struct {
}

func (m *MsgExtendVotingPeriodResponse) Reset()         { *m = MsgExtendVotingPeriodResponse{} }
func (m *MsgExtendVotingPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExtendVotingPeriodResponse) ProtoMessage()    {}
func (*MsgExtendVotingPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{5}
}
func (m *MsgExtendVotingPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtendVotingPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtendVotingPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtendVotingPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtendVotingPeriodResponse.Merge(m, src)
}
func (m *MsgExtendVotingPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtendVotingPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtendVotingPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtendVotingPeriodResponse proto.InternalMessageInfo

// MsgVetoProposal defines a message for vetoing a proposal.
type MsgVetoProposal struct {
	// vetoer is the address of the dao vetoing the proposal.
	Vetoer string `protobuf:"bytes,1,opt,name=vetoer,proto3" json:"vetoer,omitempty"`
	// proposal_id is the ID of the proposal to veto.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// burn_deposit is a boolean indicating whether to burn the deposit of the proposal.
	// If true, the deposit is burned and not refunded.
	BurnDeposit bool `protobuf:"varint,3,opt,name=burn_deposit,json=burnDeposit,proto3" json:"burn_deposit,omitempty"`
}

func (m *MsgVetoProposal) Reset()         { *m = MsgVetoProposal{} }
func (m *MsgVetoProposal) String() string { return proto.CompactTextString(m) }
func (*MsgVetoProposal) ProtoMessage()    {}
func (*MsgVetoProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{6}
}
func (m *MsgVetoProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVetoProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVetoProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVetoProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVetoProposal.Merge(m, src)
}
func (m *MsgVetoProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgVetoProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVetoProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVetoProposal proto.InternalMessageInfo

func (m *MsgVetoProposal) GetVetoer() string {
	if m != nil {
		return m.Vetoer
	}
	return ""
}

func (m *MsgVetoProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *MsgVetoProposal) GetBurnDeposit() bool {
	if m != nil {
		return m.BurnDeposit
	}
	return false
}

// MsgVetoProposalResponse defines the response for MsgVetoProposal.
type MsgVetoProposalResponse struct {
}

func (m *MsgVetoProposalResponse) Reset()         { *m = MsgVetoProposalResponse{} }
func (m *MsgVetoProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVetoProposalResponse) ProtoMessage()    {}
func (*MsgVetoProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{7}
}
func (m *MsgVetoProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVetoProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVetoProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVetoProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVetoProposalResponse.Merge(m, src)
}
func (m *MsgVetoProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVetoProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVetoProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVetoProposalResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/coredaos parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{8}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_942eb16dc573b0ab, []int{9}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAnnotateProposal)(nil), "atomone.coredaos.v1.MsgAnnotateProposal")
	proto.RegisterType((*MsgAnnotateProposalResponse)(nil), "atomone.coredaos.v1.MsgAnnotateProposalResponse")
	proto.RegisterType((*MsgEndorseProposal)(nil), "atomone.coredaos.v1.MsgEndorseProposal")
	proto.RegisterType((*MsgEndorseProposalResponse)(nil), "atomone.coredaos.v1.MsgEndorseProposalResponse")
	proto.RegisterType((*MsgExtendVotingPeriod)(nil), "atomone.coredaos.v1.MsgExtendVotingPeriod")
	proto.RegisterType((*MsgExtendVotingPeriodResponse)(nil), "atomone.coredaos.v1.MsgExtendVotingPeriodResponse")
	proto.RegisterType((*MsgVetoProposal)(nil), "atomone.coredaos.v1.MsgVetoProposal")
	proto.RegisterType((*MsgVetoProposalResponse)(nil), "atomone.coredaos.v1.MsgVetoProposalResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "atomone.coredaos.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "atomone.coredaos.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("atomone/coredaos/v1/tx.proto", fileDescriptor_942eb16dc573b0ab) }

var fileDescriptor_942eb16dc573b0ab = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x4f, 0xd4, 0x5e,
	0x14, 0x9d, 0xfe, 0xe0, 0x47, 0x98, 0x0b, 0x11, 0x2d, 0x28, 0x43, 0x81, 0x82, 0xd5, 0xc8, 0x38,
	0x91, 0xa9, 0x40, 0x62, 0xcc, 0x98, 0x98, 0x40, 0x74, 0xc1, 0x62, 0x12, 0x52, 0x23, 0x0b, 0x37,
	0xa4, 0x43, 0x5f, 0x4a, 0xa3, 0xed, 0x6d, 0xde, 0x7b, 0x33, 0xc2, 0xce, 0xb8, 0xd4, 0x8d, 0x2e,
	0xdd, 0xba, 0xd1, 0x25, 0x0b, 0x3f, 0x04, 0x2b, 0x43, 0x5c, 0xb9, 0x32, 0x06, 0x16, 0x7c, 0x0d,
	0xd3, 0xbe, 0xd7, 0x3f, 0xcc, 0xb4, 0x61, 0x36, 0x93, 0xde, 0x73, 0x4f, 0xef, 0x39, 0x67, 0x72,
	0xef, 0x0c, 0x2c, 0xd8, 0x1c, 0x7d, 0x0c, 0x88, 0xb9, 0x8f, 0x94, 0x38, 0x36, 0x32, 0xb3, 0xb7,
	0x66, 0xf2, 0xc3, 0x66, 0x48, 0x91, 0xa3, 0x3a, 0x2d, 0xbb, 0xcd, 0xa4, 0xdb, 0xec, 0xad, 0x69,
	0x33, 0x2e, 0xba, 0x18, 0xf7, 0xcd, 0xe8, 0x49, 0x50, 0xb5, 0xb9, 0x7d, 0x64, 0x3e, 0xb2, 0x3d,
	0xd1, 0x10, 0x85, 0x6c, 0xcd, 0x8a, 0xca, 0xf4, 0x99, 0x1b, 0x4d, 0xf7, 0x99, 0x2b, 0x1b, 0x37,
	0x6c, 0xdf, 0x0b, 0xd0, 0x8c, 0x3f, 0x25, 0x64, 0x14, 0xf9, 0x49, 0xd5, 0x63, 0x8e, 0xf1, 0x53,
	0x81, 0xe9, 0x36, 0x73, 0x37, 0x83, 0x00, 0xb9, 0xcd, 0xc9, 0x0e, 0xc5, 0x10, 0x99, 0xfd, 0x46,
	0x5d, 0x80, 0xaa, 0x2d, 0x30, 0xa4, 0x35, 0x65, 0x59, 0xa9, 0x57, 0xad, 0x0c, 0x50, 0x97, 0x60,
	0x22, 0x94, 0xcc, 0x3d, 0xcf, 0xa9, 0xfd, 0xb7, 0xac, 0xd4, 0x47, 0x2d, 0x48, 0xa0, 0x6d, 0x47,
	0xd5, 0x01, 0x24, 0xdb, 0xc3, 0xa0, 0x36, 0x12, 0xbf, 0x9f, 0x43, 0xa2, 0xf1, 0xd8, 0x23, 0xf4,
	0x2d, 0xf5, 0x38, 0xa9, 0x8d, 0x2e, 0x2b, 0xf5, 0x71, 0x2b, 0x03, 0x5a, 0xad, 0xf7, 0x17, 0xc7,
	0x8d, 0x4c, 0xee, 0xc3, 0xc5, 0x71, 0x63, 0xa5, 0x28, 0x4b, 0x81, 0x71, 0x63, 0x11, 0xe6, 0x0b,
	0x60, 0x8b, 0xb0, 0x10, 0x03, 0x46, 0x8c, 0x8f, 0x0a, 0xa8, 0x6d, 0xe6, 0x3e, 0x0f, 0x1c, 0xa4,
	0x2c, 0x8b, 0xab, 0xc1, 0x38, 0x11, 0x50, 0x92, 0x36, 0xad, 0xaf, 0x0c, 0xdb, 0x7a, 0x1c, 0xd9,
	0x4d, 0xf9, 0x91, 0xdb, 0x7b, 0x25, 0x6e, 0xfb, 0x64, 0x8d, 0x05, 0xd0, 0x06, 0xd1, 0xd4, 0xeb,
	0x67, 0x05, 0x6e, 0x46, 0xed, 0x43, 0x4e, 0x02, 0x67, 0x17, 0xb9, 0x17, 0xb8, 0x3b, 0x84, 0x7a,
	0xe8, 0xc4, 0x76, 0x63, 0x34, 0x67, 0x57, 0xd6, 0x57, 0xdb, 0x7d, 0x22, 0xec, 0x4a, 0x7e, 0x64,
	0xf7, 0x7e, 0x99, 0xdd, 0x01, 0x65, 0x63, 0x09, 0x16, 0x0b, 0x1b, 0xa9, 0xe9, 0xaf, 0x0a, 0x4c,
	0xb5, 0x99, 0xbb, 0x4b, 0x38, 0xa6, 0xdf, 0xee, 0x2d, 0x18, 0xeb, 0x11, 0x8e, 0xa9, 0x59, 0x59,
	0x5d, 0xbd, 0x46, 0xb7, 0x61, 0xb2, 0xd3, 0xa5, 0xc1, 0x9e, 0x43, 0x42, 0x64, 0x1e, 0x8f, 0x17,
	0x69, 0xdc, 0x9a, 0x88, 0xb0, 0x67, 0x02, 0x6a, 0x6d, 0x44, 0x69, 0xe4, 0xc0, 0x28, 0xcb, 0x9d,
	0x92, 0x2c, 0x79, 0x43, 0xc6, 0x1c, 0xcc, 0xf6, 0x41, 0xa9, 0xff, 0x2f, 0xc2, 0xff, 0xcb, 0xd0,
	0x89, 0xd6, 0xc7, 0xa6, 0xb6, 0xcf, 0xd4, 0x47, 0x50, 0xb5, 0xbb, 0xfc, 0x00, 0xa9, 0xc7, 0x8f,
	0x44, 0x84, 0xad, 0xda, 0xaf, 0x1f, 0xab, 0x33, 0xf2, 0x32, 0x37, 0x1d, 0x87, 0x12, 0xc6, 0x5e,
	0x70, 0xea, 0x05, 0xae, 0x95, 0x51, 0xd5, 0xa7, 0x30, 0x16, 0xc6, 0x13, 0xe2, 0x68, 0x13, 0xeb,
	0xf3, 0xcd, 0x82, 0xdf, 0x80, 0xa6, 0x10, 0xd9, 0xaa, 0x9e, 0xfc, 0x59, 0xaa, 0x7c, 0xbf, 0x38,
	0x6e, 0x28, 0x96, 0x7c, 0xab, 0x75, 0x4d, 0xdc, 0x41, 0x32, 0x4f, 0xda, 0xce, 0x5b, 0x4b, 0x6c,
	0xaf, 0x7f, 0x1b, 0x85, 0x91, 0x36, 0x73, 0xd5, 0x00, 0xae, 0x0f, 0xdc, 0x72, 0xbd, 0x50, 0xb6,
	0xe0, 0x4a, 0xb4, 0x87, 0xc3, 0x32, 0x13, 0x5d, 0xf5, 0x35, 0x4c, 0xf5, 0xdf, 0xd2, 0x4a, 0xd9,
	0x90, 0x3e, 0xa2, 0x66, 0x0e, 0x49, 0x4c, 0xc5, 0x38, 0xa8, 0x05, 0xc7, 0xd0, 0x28, 0x1d, 0x33,
	0xc0, 0xd5, 0xd6, 0x87, 0xe7, 0xa6, 0xaa, 0x1d, 0x98, 0xbc, 0xb4, 0xcd, 0x77, 0xcb, 0x66, 0xe4,
	0x59, 0xda, 0x83, 0x61, 0x58, 0x79, 0x8d, 0x4b, 0x1b, 0x57, 0xaa, 0x91, 0x67, 0x95, 0x6b, 0x14,
	0xad, 0x88, 0xf6, 0xff, 0xbb, 0x68, 0xb9, 0xb6, 0xb6, 0x4f, 0xce, 0x74, 0xe5, 0xf4, 0x4c, 0x57,
	0xfe, 0x9e, 0xe9, 0xca, 0xa7, 0x73, 0xbd, 0x72, 0x7a, 0xae, 0x57, 0x7e, 0x9f, 0xeb, 0x95, 0x57,
	0xa6, 0xeb, 0xf1, 0x83, 0x6e, 0xa7, 0xb9, 0x8f, 0xbe, 0x29, 0x07, 0xaf, 0x1e, 0x74, 0x3b, 0xc9,
	0xb3, 0x79, 0x98, 0xdd, 0x14, 0x3f, 0x0a, 0x09, 0xeb, 0x8c, 0xc5, 0xff, 0x21, 0x1b, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x86, 0xe3, 0x2f, 0x93, 0xf9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AnnotateProposal defines a method to annotate a proposal with additional information.
	// It is only available to the Steering DAO.
	AnnotateProposal(ctx context.Context, in *MsgAnnotateProposal, opts ...grpc.CallOption) (*MsgAnnotateProposalResponse, error)
	// EndorseProposal defines a method to endorse a proposal, and for law proposals this also
	// results in the lowering of the passing threshold to the passing threshold of regular proposals.
	// It is only available to the Steering DAO.
	EndorseProposal(ctx context.Context, in *MsgEndorseProposal, opts ...grpc.CallOption) (*MsgEndorseProposalResponse, error)
	// ExtendVotingPeriod defines a method to extend the voting period of a proposal.
	// It is available to both the Steering DAO and the Oversight DAO.
	ExtendVotingPeriod(ctx context.Context, in *MsgExtendVotingPeriod, opts ...grpc.CallOption) (*MsgExtendVotingPeriodResponse, error)
	// VetoProposal defines a method to veto a proposal.
	// It is only available to the Oversight DAO.
	VetoProposal(ctx context.Context, in *MsgVetoProposal, opts ...grpc.CallOption) (*MsgVetoProposalResponse, error)
	// UpdateParams defines a governance operation for updating the x/coredaos
	// module parameters. The authority is defined in the keeper.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AnnotateProposal(ctx context.Context, in *MsgAnnotateProposal, opts ...grpc.CallOption) (*MsgAnnotateProposalResponse, error) {
	out := new(MsgAnnotateProposalResponse)
	err := c.cc.Invoke(ctx, "/atomone.coredaos.v1.Msg/AnnotateProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EndorseProposal(ctx context.Context, in *MsgEndorseProposal, opts ...grpc.CallOption) (*MsgEndorseProposalResponse, error) {
	out := new(MsgEndorseProposalResponse)
	err := c.cc.Invoke(ctx, "/atomone.coredaos.v1.Msg/EndorseProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExtendVotingPeriod(ctx context.Context, in *MsgExtendVotingPeriod, opts ...grpc.CallOption) (*MsgExtendVotingPeriodResponse, error) {
	out := new(MsgExtendVotingPeriodResponse)
	err := c.cc.Invoke(ctx, "/atomone.coredaos.v1.Msg/ExtendVotingPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VetoProposal(ctx context.Context, in *MsgVetoProposal, opts ...grpc.CallOption) (*MsgVetoProposalResponse, error) {
	out := new(MsgVetoProposalResponse)
	err := c.cc.Invoke(ctx, "/atomone.coredaos.v1.Msg/VetoProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/atomone.coredaos.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AnnotateProposal defines a method to annotate a proposal with additional information.
	// It is only available to the Steering DAO.
	AnnotateProposal(context.Context, *MsgAnnotateProposal) (*MsgAnnotateProposalResponse, error)
	// EndorseProposal defines a method to endorse a proposal, and for law proposals this also
	// results in the lowering of the passing threshold to the passing threshold of regular proposals.
	// It is only available to the Steering DAO.
	EndorseProposal(context.Context, *MsgEndorseProposal) (*MsgEndorseProposalResponse, error)
	// ExtendVotingPeriod defines a method to extend the voting period of a proposal.
	// It is available to both the Steering DAO and the Oversight DAO.
	ExtendVotingPeriod(context.Context, *MsgExtendVotingPeriod) (*MsgExtendVotingPeriodResponse, error)
	// VetoProposal defines a method to veto a proposal.
	// It is only available to the Oversight DAO.
	VetoProposal(context.Context, *MsgVetoProposal) (*MsgVetoProposalResponse, error)
	// UpdateParams defines a governance operation for updating the x/coredaos
	// module parameters. The authority is defined in the keeper.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AnnotateProposal(ctx context.Context, req *MsgAnnotateProposal) (*MsgAnnotateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnotateProposal not implemented")
}
func (*UnimplementedMsgServer) EndorseProposal(ctx context.Context, req *MsgEndorseProposal) (*MsgEndorseProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndorseProposal not implemented")
}
func (*UnimplementedMsgServer) ExtendVotingPeriod(ctx context.Context, req *MsgExtendVotingPeriod) (*MsgExtendVotingPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendVotingPeriod not implemented")
}
func (*UnimplementedMsgServer) VetoProposal(ctx context.Context, req *MsgVetoProposal) (*MsgVetoProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VetoProposal not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AnnotateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnnotateProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AnnotateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomone.coredaos.v1.Msg/AnnotateProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AnnotateProposal(ctx, req.(*MsgAnnotateProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EndorseProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEndorseProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EndorseProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomone.coredaos.v1.Msg/EndorseProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EndorseProposal(ctx, req.(*MsgEndorseProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExtendVotingPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExtendVotingPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExtendVotingPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomone.coredaos.v1.Msg/ExtendVotingPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExtendVotingPeriod(ctx, req.(*MsgExtendVotingPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VetoProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVetoProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VetoProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomone.coredaos.v1.Msg/VetoProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VetoProposal(ctx, req.(*MsgVetoProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomone.coredaos.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomone.coredaos.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnotateProposal",
			Handler:    _Msg_AnnotateProposal_Handler,
		},
		{
			MethodName: "EndorseProposal",
			Handler:    _Msg_EndorseProposal_Handler,
		},
		{
			MethodName: "ExtendVotingPeriod",
			Handler:    _Msg_ExtendVotingPeriod_Handler,
		},
		{
			MethodName: "VetoProposal",
			Handler:    _Msg_VetoProposal_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomone/coredaos/v1/tx.proto",
}

func (m *MsgAnnotateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnnotateProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnnotateProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Overwrite {
		i--
		if m.Overwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Annotation) > 0 {
		i -= len(m.Annotation)
		copy(dAtA[i:], m.Annotation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Annotation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Annotator) > 0 {
		i -= len(m.Annotator)
		copy(dAtA[i:], m.Annotator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Annotator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAnnotateProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnnotateProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnnotateProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEndorseProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndorseProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEndorseProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Endorser) > 0 {
		i -= len(m.Endorser)
		copy(dAtA[i:], m.Endorser)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Endorser)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEndorseProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndorseProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEndorseProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExtendVotingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtendVotingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtendVotingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Extender) > 0 {
		i -= len(m.Extender)
		copy(dAtA[i:], m.Extender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Extender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExtendVotingPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtendVotingPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtendVotingPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVetoProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVetoProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVetoProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnDeposit {
		i--
		if m.BurnDeposit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ProposalId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Vetoer) > 0 {
		i -= len(m.Vetoer)
		copy(dAtA[i:], m.Vetoer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Vetoer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVetoProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVetoProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVetoProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAnnotateProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Annotator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovTx(uint64(m.ProposalId))
	}
	l = len(m.Annotation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Overwrite {
		n += 2
	}
	return n
}

func (m *MsgAnnotateProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEndorseProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endorser)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovTx(uint64(m.ProposalId))
	}
	return n
}

func (m *MsgEndorseProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExtendVotingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Extender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovTx(uint64(m.ProposalId))
	}
	return n
}

func (m *MsgExtendVotingPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVetoProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vetoer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovTx(uint64(m.ProposalId))
	}
	if m.BurnDeposit {
		n += 2
	}
	return n
}

func (m *MsgVetoProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAnnotateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnnotateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnnotateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAnnotateProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnnotateProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnnotateProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndorseProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndorseProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndorseProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endorser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndorseProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndorseProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndorseProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtendVotingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtendVotingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtendVotingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtendVotingPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtendVotingPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtendVotingPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVetoProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVetoProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVetoProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vetoer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vetoer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnDeposit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnDeposit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVetoProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVetoProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVetoProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
